openapi: 3.0.3
info:
  version: 1.0.0
  title: Swagger openid4vp - OpenAPI 3.0
  description: OpenAPI that based on open for VP restricted to the Response Mode direct_post [OpenId for VP]
  contact:
    name: Idakto Security Team
    email: security@idakto.com
tags:
  - name: internal
    description: Path called from internal backend client
  - name: external
    description: Path called from external client
  - name: pathignoredbygenerator
    description: Code not generated


paths:
  /internal/v1/authorization:
    post:
      tags:
        - internal
      summary: Create an authorization
      description: |
        Create an authorization
      operationId: CreateAuthorization
      requestBody:
        description: |
          Parameters to create an authorization
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewAuthorization"
      responses:
        "201":
          description: Created
          headers:
            Location:
              schema:
                type: string
                example: "https://openid4vp-server.com/v1/authorization/data?transaction_id=YWIbR1oGv9LuGwVVB0JqSA"
              description: the transaction ID
          content:
            text/plain:
              schema:
                type: string
                example: "https://wallet.idakto.com?client_id=https%3A%2F%2Fopenid4vp-server.com&request_uri=https%3A%2F%2Fopenid4vp-server.com%2Fv1%2Fauthorization%2Frequest.jwt%2FdIhFs8slHZ3bL-lorol2jg"
                description: |
                  URI containing wallet uri with client_id & request_uri from openid4vp server
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "../../commons/openapi.yml#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "../../commons/openapi.yml#/components/schemas/Error"

  /v1/authorization/request.jwt/{requestRefId}:
    get:
      tags:
        - external
      summary: Retrieve authorization request
      description: |
        Retrieve authorization request as defined in [RFC 9101 §5.1](https://www.rfc-editor.org/rfc/rfc9101.html#name-passing-a-request-object-by) for normal mode and in [RFC 9101 §5.2](https://www.rfc-editor.org/rfc/rfc9101.html#name-passing-a-request-object-by-) for redirect mode.
      operationId: GetAuthorizationRequest
      parameters:
        - name: requestRefId
          in: path
          description: The request reference ID as defined in [RFC 9101 §10.2.d](https://www.rfc-editor.org/rfc/rfc9101.html#name-request-source-authenticati). 128 bits length is equal to 22 characters in base64URL
          example: dIhFs8slHZ3bL-lorol2jg
          required: true
          schema:
            $ref: "#/components/schemas/RequestRefId"
      responses:
        "200":
          description: OK
          content:
            application/x-www-form-urlencoded:
              schema:
                $ref: "#/components/schemas/AuthorizationRequestJAR"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "../../commons/openapi.yml#/components/schemas/Error"
        "404":
          description: Not Found (requestRefId does not exist)
          content:
            application/json:
              schema:
                $ref: "../../commons/openapi.yml#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "../../commons/openapi.yml#/components/schemas/Error"

  /v1/authorization/request.jwt/{requestRefId}/presentation_definition:
    get:
      tags:
        - external
      summary: Retrieve presentation definition
      description: |
        Retrieve presentation definition
      operationId: GetPresentationDefinition
      parameters:
        - name: requestRefId
          in: path
          description: The request reference ID as defined in [RFC 9101 §10.2.d](https://www.rfc-editor.org/rfc/rfc9101.html#name-request-source-authenticati). 128 bits length is equal to 22 characters in base64URL
          example: dIhFs8slHZ3bL-lorol2jg
          required: true
          schema:
            $ref: "#/components/schemas/RequestRefId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PresentationDefinition"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "../../commons/openapi.yml#/components/schemas/Error"
        "404":
          description: Not Found (requestRefId does not exist)
          content:
            application/json:
              schema:
                $ref: "../../commons/openapi.yml#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "../../commons/openapi.yml#/components/schemas/Error"

  /v1/authorization/response:
    post:
      tags:
        - external
        - pathignoredbygenerator
      summary: Receive authorization response
      description: |
        Receive authorization response as defined in [OpenID4VP §6.1](https://openid.github.io/OpenID4VP/openid-4-verifiable-presentations-wg-draft.html#name-response-parameters)
      operationId: PostAuthorizationResponse
      requestBody:
        description: |
          Authorization response
        content:
          application/x-www-form-urlencoded:
            schema:
              oneOf:
                - $ref: "#/components/schemas/AuthorizationResponseForm"
                - $ref: "#/components/schemas/ErrorResponseForm"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RedirectUri"
        "204":
          description: No Content (error received from authorization server)
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "../../commons/openapi.yml#/components/schemas/Error"
        "401":
          description: "Forbidden (state value provided in the body is wrong)"
          content:
            application/json:
              schema:
                $ref: "../../commons/openapi.yml#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "../../commons/openapi.yml#/components/schemas/Error"

  /v1/authorization/data:
    get:
      tags:
        - external
      summary: Retrieve authorization response
      description: |
        Retrieve authorization response
      operationId: FetchData
      parameters:
        - name: transaction_id
          in: query
          description: The transaction identifier
          required: true
          schema:
            type: string
            format: base64url
            minLength: 22
            maxLength: 22
        - name: response_code
          in: query
          description: The response code (required when the redirect parameter is used)
          required: false
          schema:
            type: string
            format: base64url
            minLength: 43
            maxLength: 43
      responses:
        "200":
          description: OK (data are contained in the response body)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseFetchData"
        "204":
          description: No Content (data are not yet received)
        "400":
          description: Bad Request (in particular if the query parameter code_response is not provided while it is required to access to the data)
          content:
            application/json:
              schema:
                $ref: "../../commons/openapi.yml#/components/schemas/Error"
        "401":
          description: Unauthorized (query parameter code_response is wrong)
          content:
            application/json:
              schema:
                $ref: "../../commons/openapi.yml#/components/schemas/Error"
        "404":
          description: Not Found (transaction_id not Found, never existed or is expired or is closed and/or response_code  is wrong)
          content:
            application/json:
              schema:
                $ref: "../../commons/openapi.yml#/components/schemas/Error"
        "409":
          description: "Conflict (the client want to get the data response but the service can not returned the data : the verification of the token pushed by the wallet has failed or the wallet has pushed an error)"
          content:
            application/json:
              schema:
                $ref: "../../commons/openapi.yml#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "../../commons/openapi.yml#/components/schemas/Error"

  /v1/.well-known:
    get:
      tags:
        - external
      summary: Get the verifier metadata
      description: |
        Get the verifier metadata
      operationId: GetVerifierMetaData
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientMetadata"

components:
  schemas:
    RedirectUri:
      type: object
      properties:
        redirect_uri:
          type: string
          format: uri

    UUID:
      type: string
      format: uuid

    RequestRefId:
      type: string
      format: base64url
      description: The request reference ID as defined in [RFC 9101 §10.2.d](https://www.rfc-editor.org/rfc/rfc9101.html#name-request-source-authenticati). 128 bits length is equal to 22 characters in base64URL
      example: dIhFs8slHZ3bL-lorol2jg
      minLength: 22
      maxLength: 22

    ClientIdScheme:
      type: string
      enum: [pre-registered, redirect_uri, entity_id, did]

    PresentationDefinition:
      type: object
      properties:
        id:
          type: string
          minLength: 1
          maxLength: 100
        input_descriptors:
          type: array
          items:
            $ref: "#/components/schemas/InputDescriptor"
          minItems: 1
        name:
          type: string
          minLength: 1
          maxLength: 100
        purpose:
          type: string
          minLength: 1
          maxLength: 100
        format:
          $ref: "#/components/schemas/VPFormats"
      required:
        - id
        - input_descriptors

    NewAuthorization:
      type: object
      properties:
        scope:
          description: "Required if no input descriptor and no requested data"
          type: string
        requested_data:
          $ref: "#/components/schemas/MdocRequestedDataArray"
        redirect_uri:
          type: string
          format: uri
        mode:
          type: string
          enum:
            - direct_post
            - fragment
        wallet_uri:
          type: string
          format: uri
          example: https://wallet.idakto.com
        ttl:
          type: integer
          example: 900
        trusted_certificate:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
      required:
        - mode
        - wallet_uri
        - ttl

    MdocRequestedDataArray:
      description: "RequestedData required if no Input descriptor and no scope"
      type: array
      items:
        $ref: "#/components/schemas/MdocRequestedData"

    MdocRequestedData:
      properties:
        algorithms:
          type: array
          items:
            type: string
        doctype:
          type: string
          minLength: 1
          maxLength: 150
        namespaces:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/NamespaceRequestedData"

    NamespaceRequestedData:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/ClaimsProperties"

    ClaimsProperties:
      properties:
        intent_to_retain:
          type: boolean
        optional:
          type: boolean
      required:
        - intent_to_retain

    InputDescriptor:
      description: "Deprecated, use Requested Data instead : Required if no scope and no requested data"
      type: object
      properties:
        id:
          description: |
            Defined in [DIF.PresentationExchange] and [openId for VP].
            The value of the id property MUST be a string that does not conflict with the id of another Input Descriptor Object
          type: string
          minLength: 1
          maxLength: 100
        name:
          description: |
            Defined in [DIF.PresentationExchange] and [openId for VP].
            If present, its value SHOULD be a human-friendly name that describes what the target schema represents.
          type: string
          minLength: 1
          maxLength: 100
        purpose:
          description: |
            Defined in [DIF.PresentationExchange] and [openId for VP].
            If present, its value MUST be a string that describes the purpose for which the Claim's data is being requested.
          type: string
          minLength: 1
          maxLength: 100
        format:
          $ref: "#/components/schemas/VPFormats"
        constraints:
          $ref: "#/components/schemas/VPConstraints"
      required:
        - id

    VPConstraints:
      type: object
      properties:
        fields:
          description: |
            Defined in [DIF.PresentationExchange] and [openId for VP].
            Fields SHALL be processed forward from 0-index, so if a Verifier desires to reduce processing by checking the most defining characteristics of a credential (e.g the type or schema of a credential) implementers SHOULD order these field checks before all others to ensure earliest termination of evaluation
          type: array
          items:
            $ref: "#/components/schemas/VPField"
        limit_disclosure:
          description: |
            Defined in [DIF.PresentationExchange] and [openId for VP].
            If present, its value MUST be one of the following strings:
             "required" indicates that the Conformant Consumer MUST limit submitted fields to those listed in the fields array (if present). Conformant Consumers are not required to implement support for this value, but they MUST understand this value sufficiently to return nothing (or cease the interaction with the Verifier) if they do not implement it.
            "preferred" indicates that the Conformant Consumer SHOULD limit submitted fields to those listed in the fields array (if present).
          type: string
          enum:
            - required
            - prefered

    VPField:
      type: object
      properties:
        path:
          description: |
            Defined in [DIF.PresentationExchange] and [openId for VP]. 
            The value of this property MUST be an array of one or more JSONPath string expressions (as defined in the JSONPath Syntax Definition section) that select a target value from the input. The array MUST be evaluated from 0-index forward, breaking as soon as a Field Query Result is found (as described in Input Evaluation), which will be used for the rest of the entry’s evaluation. The ability to declare multiple expressions in this way allows the Verifier to account for format differences - for example: normalizing the differences in structure between JSON-LD/JWT-based Verifiable Credentials and vanilla JSON Web Tokens (JWTs) [RFC7519].
          type: array
          items:
            type: string
            minLength: 1
            maxLength: 200
          minItems: 1
        id:
          description: |
            Defined in [DIF.PresentationExchange] and [openId for VP].
            If present, its value MUST be a string that is unique from every other field object’s id property, including those contained in other Input Descriptor Objects.
          type: string
          minLength: 1
          maxLength: 150
        purpose:
          description: |
            Defined in [DIF.PresentationExchange] and [openId for VP].
            If present, its value MUST be a string that describes the purpose for which the field is being requested
          type: string
          minLength: 1
          maxLength: 150
        name:
          description: |
            Defined in [DIF.PresentationExchange] and [openId for VP].
            If present, its value MUST be a string, and SHOULD be a human-friendly name that describes what the target field represents.
          type: string
          minLength: 1
          maxLength: 150
        optional:
          description: |
            Defined in [DIF.PresentationExchange] and [openId for VP].
            The value of this property MUST be a boolean, wherein true indicates the field is optional, and false or non-presence of the property indicates the field is required. Even when the optional property is present, the value located at the indicated path of the field MUST validate against the JSON Schema filter, if a filter is present.
          type: boolean
        intent_to_retain:
          description: |
            Defined in [ISO.18013-5] and [openId for VP].
            Indicate whether it intends to retain obtained user claims or not
          type: string
          enum:
            - "true"
            - "false"
      required:
        - path

    AuthorizationRequestJAR:
      type: object
      properties:
        client_id:
          description: |
            Defined in [RFC6749] and [openId for VP] 
            The client identifier corresponding to AuthorizationRequest.client_id (see AuthorizationRequest)
            The value match the request's client_id [RFC9101]
          type: string
          x-oapi-codegen-extra-tags:
            form: client_id
        request:
          description: |
            Defined in [RFC9101] and [openId for VP]
            REQUIRED unless request_uri is specified.  If this parameter is present in the authorization request, request_uri MUST NOT be present.
            JWS-signed 
            [RFC9101] That holds authorization request parameters and the Authorization Request Object contain the Claims iss (issuer) and aud (audience) as members with their semantics being the same as defined in the specification.
            [openId for VP] The Authorization Request Object contain the Claims iss (issuer) and aud
              (audience) as members with their semantics being the same as defined in the
              specification.
          type: string
          x-oapi-codegen-extra-tags:
            form: request
        request_uri:
          description: |
            Defined in [RFC9101] and [openId for VP]
            REQUIRED unless request is specified. If this parameter is present in the authorization request, request MUST NOT be present.
            JWS-signed 
            [RFC9101] The absolute URI, as defined by RFC 3986 [RFC3986], that is the Request Object URI (Section 2.2) referencing the authorization request.
          type: string
          format: uri
          x-oapi-codegen-extra-tags:
            form: request_uri
      required:
        - client_id

    AuthorizationRequest:
      type: object
      properties:
        client_id:
          description: |
            Defined in [RFC6749] and [openId for VP] 
            The client identifier.
          type: string
          x-oapi-codegen-extra-tags:
            form: client_id
        client_id_scheme:
          description: |
            Defined in [openId for VP] 
            A string identifying the scheme of the value in the client_id Authorization Request parameter (Client Identifier scheme). The client_id_scheme parameter namespaces the respective Client Identifier. If an Authorization Request uses the client_id_scheme parameter, the Wallet MUST interpret the Client Identifier of the Verifier in the context of the Client Identifier scheme. If the parameter is not present, the Wallet MUST behave as specified in [RFC6749]. See Section 5.7 for the values defined by this specification. If the same Client Identifier is used with different Client Identifier schemes, those occurrences MUST be treated as different Verifiers. Note that the Verifier needs to determine which Client Identifier schemes the Wallet supports prior to sending the Authorization Request in order to choose a supported scheme.
            The value pre-registered represents the [RFC6749] default behavior.
            All values are described in  [openId for VP]
          $ref: "#/components/schemas/ClientIdScheme"
          x-oapi-codegen-extra-tags:
            form: client_id_scheme
        client_metadata:
          description: |
            Defined in [openId for VP] 
            A JSON object containing the Verifier metadata values. It MUST be UTF-8 encoded. It MUST NOT be present if client_metadata_uri parameter is present.
          $ref: "#/components/schemas/ClientMetadata"
          x-oapi-codegen-extra-tags:
            form: client_metadata
        client_metadata_uri:
          description: |
            Defined in [openId for VP] 
             A string containing an HTTPS URL pointing to a resource where a JSON object with the Verifier metadata can be retrieved. The scheme used in the client_metadata_uri value MUST be https. The client_metadata_uri value MUST be reachable by the Wallet. It MUST NOT be present if client_metadata parameter is present.
          type: string
          format: uri
          x-oapi-codegen-extra-tags:
            form: client_metadata_uri
        presentation_definition:
          description: |
            Defined in [openId for VP] 
            A string containing a Presentation Definition JSON object.  This parameter MUST be present when presentation_definition_uri parameter, or a scope value representing a Presentation Definition is not present.
          type: string
          x-oapi-codegen-extra-tags:
            form: presentation_definition
        presentation_definition_uri:
          description: |
            Defined in [openId for VP] 
            A string containing an HTTPS URL pointing to a resource where a Presentation Definition JSON object can be retrieved. This parameter MUST be present when presentation_definition parameter, or a scope value representing a Presentation Definition is not present.
          type: string
          format: uri
          x-oapi-codegen-extra-tags:
            form: presentation_definition_uri
        nonce:
          description: |
            Defined in [OpenID.Core] and [openId for VP]. 
            It is used to securely bind the Verifiable Presentation(s) provided by the Wallet to the particular transaction.
          type: string
          x-oapi-codegen-extra-tags:
            form: nonce
        scope:
          description: |
            Defined in [RFC6749] and [openId for VP].
            The Wallet MAY allow Verifiers to request presentation of Verifiable Credentials by utilizing a pre-defined scope value.
          type: string
          x-oapi-codegen-extra-tags:
            form: scope
        response_mode:
          description: |
            Defined in [OAuth.Responses] and [openId for VP].
            This parameter is used (through the new Response Mode direct_post) to ask the Wallet to send the response to the Verifier via an HTTPS connection (see Section 6.2 for more details). It is also used to request signing and encrypting (see Section 6.3 for more details). If the parameter is not present, the default value is fragment.
            Note: only the response mode  direct_post is supported
          type: string
          enum: [direct_post]
          x-oapi-codegen-extra-tags:
            form: response_mode
        response_type:
          description: |
            Defined in [openId for VP].
            The Response URI to which the Wallet MUST send the Authorization Response using an HTTPS POST request as defined by the Response Mode direct_post.
          type: string
          enum: [vp_token]
          x-oapi-codegen-extra-tags:
            form: response_type
        response_uri:
          description: |
            It MUST be present when the Response Mode direct_post is used. The Response URI to which the Wallet MUST send the Authorization Response using an HTTPS POST request as defined by the Response Mode direct_post. The Response URI receives all Authorization Response parameters as defined by the respective Response Type. When the response_uri parameter is present, the redirect_uri Authorization Request parameter MUST NOT be present. If the redirect_uri Authorization Request parameter is present when the Response Mode is direct_post, the Wallet MUST return an invalid_request Authorization Response error.
          type: string
          format: uri
          x-oapi-codegen-extra-tags:
            form: response_uri
        redirect_uri:
          description: |
            Defined in [RFC6749].
            The redirection endpoint URI MUST be an absolute URI as defined by [RFC3986] Section 4.3.
            When the response_uri parameter is present, the redirect_uri Authorization Request parameter MUST NOT be present.
          type: string
          format: uri
          x-oapi-codegen-extra-tags:
            form: redirect_uri
        state:
          description: |
            Defined in [RFC6749]. 
            An opaque value used by the client to maintain state between the request and callback. The authorization server includes this value when redirecting the user-agent back   to the client. The parameter SHOULD be used for preventing cross-site request forgery as described in Section 10.12.
          type: string
          x-oapi-codegen-extra-tags:
            form: state
      required:
        - client_id
        - nonce
        - response_type

    ClientMetadata:
      type: object
      description: |
        Defined in [openid for VP] and [RFC 7591].
        For JAR, some field are added according to [RFC9101]
        Note: The request is not encrypted so no field  request_object_encryption_alg and request_object_encryption_enc defined in RFC9101 are set
      properties:
        jwks:
          type: array
          items:
            $ref: "#/components/schemas/JWK"
        vp_formats:
          $ref: "#/components/schemas/VPFormats"
        authorization_signed_response_alg:
          type: string
        authorization_encrypted_response_alg:
          type: string
        authorization_encrypted_response_enc:
          type: string
    ResponseFetchData:
      type: object
      properties:
        authorization_response:
          $ref: "#/components/schemas/AuthorizationResponse"
        error_response:
          $ref: "#/components/schemas/ErrorResponseForm"

    AuthorizationResponse:
      type: object
      properties:
        vp_token:
          type: string
          format: base64url
        presentation_submission:
          $ref: "#/components/schemas/PresentationSubmission"
      required:
        - vp_token
        - presentation_submission

    AuthorizationResponseForm:
      type: object
      properties:
        vp_token:
          type: string
          description: |
            VP token in base64URL
          format: base64url
          # arbitrary values
          minLength: 4
          maxLength: 1333334 #1MB of data in base64URL (1MB * 8 / 6)
        presentation_submission:
          $ref: "#/components/schemas/PresentationSubmission"
        state:
          type: string
          description: |
            State is on 128 bits (size of 43 characters in base64URL)
          format: base64url
          minLength: 43
          maxLength: 43
          example: iNiB2uAvubBdarhlRSkMVcWuY_-0vQs47PMhXO5pfW8
      required:
        - vp_token
        - presentation_submission
        - state

    ErrorResponseForm:
      type: object
      properties:
        error:
          type: string
          enum:
            - invalid_request
            - invalid_client
            - invalid_grant
            - unauthorized_client
            - unsupported_grant_type
            - unsupported_response_type
            - invalid_scope
            - vp_formats_not_supported
            - invalid_presentation_definition_uri
            - invalid_presentation_definition_reference
            - access_denied
            - server_error
            - temporarily_unavailable
        error_description:
          type: string
          minLength: 1
          maxLength: 150
        error_uri:
          type: string
          format: uri
          minLength: 1
          maxLength: 150
        state:
          type: string
          description: |
            State is on 128 bits (size of 43 characters in base64URL)
          format: base64url
          minLength: 43
          maxLength: 43
          example: iNiB2uAvubBdarhlRSkMVcWuY_-0vQs47PMhXO5pfW8
      required:
        - state

    PresentationSubmission:
      type: object
      description: |
        PresentationSubmission as defined in [DIF Presentation Exchange 2.0.0 §6](https://identity.foundation/presentation-exchange/spec/v2.0.0/#presentation-submission)
      properties:
        id:
          type: string
          example: a30e3b91-fb77-4d22-95fa-871689c322e2
        definition_id:
          type: string
        descriptor_map:
          type: array
          items:
            $ref: "#/components/schemas/Descriptor"
      required:
        - id
        - definition_id
        - descriptor_map

    Descriptor:
      type: object
      description: |
        Descriptor as defined in [DIF Presentation Exchange 2.0.0 §6](https://identity.foundation/presentation-exchange/spec/v2.0.0/#presentation-submission)
      properties:
        id:
          type: string
          example: banking_input_2
        format:
          type: string
          example: jwt_vc
        path:
          type: string
          example: $.verifiableCredential[0]
        path_nested:
          $ref: "#/components/schemas/Descriptor"
      required:
        - id
        - format
        - path

    Data:
      type: object
    Status:
      type: string
      enum:
        - ok
        - notOK

    JWK:
      type: object
      properties:
        kty:
          type: string
          enum:
            - RSA
            - EC
        x:
          type: string
        y:
          type: string
        n:
          type: string
        e:
          type: string
      required:
        - kty

    VPFormats:
      type: object
      properties:
        mso_mdoc:
          $ref: "#/components/schemas/MSOFormat"

    MSOFormat:
      description: |
        the values defined in the field alg are described in ISO 1813-5
      type: object
      properties:
        alg:
          type: array
          items:
            type: string
            enum:
              - ES256
              - ES384
              - ES512
              - EdDSA
      required:
        - alg

